/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/z4Q3x1Rr9Zb
 */
import { Button } from "@/components/ui/button";
import {
  TableHead,
  TableRow,
  TableHeader,
  TableCell,
  TableBody,
  Table,
} from "@/components/ui/table";
import { Game } from "@/structs/structs";
import React, { useState } from "react";
import * as utils from "@/utils/utils";

type Props = {
  gamedata: Game;
  getReady: () => void;
  isGame: boolean;
  lobby: () => void;
};

const Scoreboard = (props: Props) => {
  const [gamedata, getReady, isGame, lobby] = [
    props.gamedata,
    props.getReady,
    props.isGame,
    props.lobby,
  ];
  const [isReady, setIsReady] = useState<boolean>(false);

  const debug = (e: React.SyntheticEvent) => {
    e.preventDefault();
    console.log(gamedata);
  };
  const standings = gamedata.players.sort((a: any, b: any) => {
    return a.score - b.score;
  });

  const readyHandler = (e: React.SyntheticEvent) => {
    e.preventDefault();
    setIsReady(true);
    getReady();
  };

  const lobbyHandler = (e: React.SyntheticEvent) => {
    e.preventDefault();
    lobby();
  };

  return (
    <div className="flex flex-col w-full p-4 space-y-4 border border-gray-200 rounded-lg dark:border-gray-800">
      <div className={isGame ? "" : "flex items-center gap-4"}>
        {!isGame && <h1 className="text-2xl font-semibold">Round end</h1>}
        {isGame && (
          <div className="text-center">
            <h1 className="text-center text-5xl font-semibold ">
              WINNER: {utils.GetWinner(gamedata.players)}
            </h1>
          </div>
        )}

        {isReady && <>Waiting for others...</>}
        {!isReady && !isGame && (
          <Button onClick={readyHandler} size="sm">
            Ready for next round?
          </Button>
        )}
        <Button size="sm" onClick={debug}>
          Debug
        </Button>
      </div>
      <div className="rounded-lg overflow-hidden border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[60px]">Rank</TableHead>
              <TableHead>Name</TableHead>
              <TableHead>Score</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {standings.map((player: any, index: number) => (
              <TableRow key={index} className="bg-gray-100 dark:bg-gray-800">
                <TableCell className="font-semibold">{index + 1}</TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">{player.name}</div>
                </TableCell>
                <TableCell>{player.score}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        {isGame && (
          <div>
            <Button onClick={lobbyHandler} className="m-5">
              Back to lobby!
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Scoreboard;
